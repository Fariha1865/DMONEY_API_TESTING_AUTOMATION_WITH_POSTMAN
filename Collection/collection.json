{
	"info": {
		"_postman_id": "8a3bee38-bcd5-4919-a20f-5d8d50507cc7",
		"name": "SDET_Assignment_Fariha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23406180"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Successful Login",
					"item": [
						{
							"name": "Successful Login with Valid Email and Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Login",
					"item": [
						{
							"name": "Login with valid Email and invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with Valid Email and Invalid Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Password incorrect\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234#\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with valid Email and empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with Valid Email and empty Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Password incorrect\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with invalid Email and valid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with invalid Email and valid Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"//comment\": \"Use email without @\",\r\n    \"email\":\"salmangrr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty Email and valid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with empty Email and valid Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with invalid Email and invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with invalid Email and invalid Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grrla\",\r\n    \"password\":\"1234.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty Email and empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login with empty Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"\",\r\n    \"password\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login without Password field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Failed Login without Password field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Password incorrect\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User Creation",
			"item": [
				{
					"name": "Successful User Creations",
					"item": [
						{
							"name": "Login for user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Creation of Customer_1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(100000,999999)\r",
											"pm.collectionVariables.set(\"C_1_RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer_1 Should be Created Successfully with all correct data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.user.id;\r",
											"pm.collectionVariables.set(\"Customer-1_Id\",id)\r",
											"\r",
											"var number = jsonData.user.phone_number;\r",
											"pm.collectionVariables.set(\"Customer-1_Phone_number\",number)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{C_1_RandomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Creation of Customer_2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(100000,999999)\r",
											"pm.collectionVariables.set(\"C_2_RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer_2 Should be Created Successfully with all correct data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.user.id;\r",
											"pm.collectionVariables.set(\"Customer-2_Id\",id)\r",
											"\r",
											"var number = jsonData.user.phone_number;\r",
											"pm.collectionVariables.set(\"Customer-2_Phone_number\",number)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{C_2_RandomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Creation of Agent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(100000,999999)\r",
											"pm.collectionVariables.set(\"Agent_RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Agent Should be Created Successfully with all correct data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.user.id;\r",
											"pm.collectionVariables.set(\"Agent_Id\",id)\r",
											"\r",
											"var number = jsonData.user.phone_number;\r",
											"pm.collectionVariables.set(\"Agent_Phone_number\",number)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{Agent_RandomId}}\",\r\n            \"role\": \"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with duplicate name, password and NID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(100000,999999)\r",
											"pm.collectionVariables.set(\"RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent can be created with duplicate name, password and NID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"Using same name, password and nid as an existing user in the database\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"Ashtyn_Johnston23_{{RandomId}}@yahoo.com\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"538-427-7976_{{RandomId}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Details",
					"item": [
						{
							"name": "Get Customer_1  Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Base_URL}}/user/search/?id={{Customer-1_Id}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"search",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "{{Customer-1_Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer_2  Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Base_URL}}/user/search/?id={{Customer-2_Id}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"search",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "{{Customer-2_Id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Agent Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Base_URL}}/user/search/?id={{Agent_Id}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"search",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "{{Agent_Id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed User Creation for wrong Token and Secret Keys",
					"item": [
						{
							"name": "Login for user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with wrong token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with wrong token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Token expired!\");\r",
											"});\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}wrong",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{randomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with empty token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with empty token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"No Token Found!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{randomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with wrong secret key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with wrong secret key\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Secret auth key validation failure!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}wrong",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{randomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with empty secret key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with empty secret key\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Secret auth key validation failure!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"{{$randomFullName}}\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"{{$randomPassword}}\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"{{randomId}}\",\r\n            \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed User Creation for Wrong Data",
					"item": [
						{
							"name": "Customer/Agent creation with duplicate email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(1000,9999)\r",
											"pm.collectionVariables.set(\"RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with duplicate email\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User already exists\");\r",
											"});\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"Using same email as an existing user in the database\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"Ashtyn_Johnston23@yahoo.com\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"538-427-{{RandomId}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with duplicate phone number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(1000,9999)\r",
											"pm.collectionVariables.set(\"RandomId\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with duplicate Phone_number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User already exists\");\r",
											"});\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"Using same phone_number as an existing user in the database\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"Ashtyn_Johnston23{{RandomId}}@yahoo.com\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"538-427-7976\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with duplicate email and phone number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent shouldn't be created with duplicate email and phone number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User already exists\");\r",
											"});\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"Using same email and phone number as an existing user in the database\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"Ashtyn_Johnston23@yahoo.com\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"538-427-7976\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wrong or Buggy User Creation with Incorrect Data",
					"item": [
						{
							"name": "Login for user creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent Creation without Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created without Role, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//comment\": \"Remove the role field\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent Creation without Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created without Name, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with invalid phone number length",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var random=_.random(100,999)\r",
											"pm.collectionVariables.set(\"small_phone_number\", random)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created with a length less than 11 digits, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//comment\": \"Use a phone number with 3 digits only\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"{{small_phone_number}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with special characters in phone number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created with all special characters in phone number,which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData= pm.response.json();\r",
											"var delete_user= jsonData.user.id;\r",
											"pm.collectionVariables.set(\"delete_user\", delete_user)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//comment\": \"Use a phone number with all special characters\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"$%#(*)#!^\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with all special characters in phone number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"User Should be deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User deleted successfully\");\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://dmoney.professionaltrainingbd.com/user/delete/{{delete_user}}",
									"protocol": "http",
									"host": [
										"dmoney",
										"professionaltrainingbd",
										"com"
									],
									"path": [
										"user",
										"delete",
										"{{delete_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with invalid email address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created with invalid email address, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"Using email without any dot(.) Same will happen if @ is not given in email\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomFullName}}@gmailcom\",\r\n            \"password\": \"zcIRQeYIpn1vWbx\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation without password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created without password, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"User creation without any password\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomFullName}}@gmailcom\",\r\n            \"password\": \"\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"262235\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with keeping all fields empty",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created keeping all the fields empty, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData= pm.response.json();\r",
											"var delete_user= jsonData.user.id;\r",
											"pm.collectionVariables.set(\"delete_user\", delete_user)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"name\": \"\",\r\n            \"email\": \"\",\r\n            \"password\": \"\",\r\n            \"phone_number\": \"\",\r\n            \"nid\": \"\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with invalid input fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"User Should be deleted\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User deleted successfully\");\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://dmoney.professionaltrainingbd.com/user/delete/{{delete_user}}",
									"protocol": "http",
									"host": [
										"dmoney",
										"professionaltrainingbd",
										"com"
									],
									"path": [
										"user",
										"delete",
										"{{delete_user}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer/Agent creation with invalid Role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Customer/Agent is being created with invalid user role, which is unexpected\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n            \"//Comment\": \"User creation with invalid Role\",\r\n            \"name\": \"Santiago Bechtelar\",\r\n            \"email\": \"{{$randomFullName}}@gmailcom\",\r\n            \"password\": \"\",\r\n            \"phone_number\": \"{{$randomPhoneNumber}}\",\r\n            \"nid\": \"262235\",\r\n            \"role\": \"Invalid\"\r\n            \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/create",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Deposit to Agent",
			"item": [
				{
					"name": "Successful Deposit to Agent",
					"item": [
						{
							"name": "Login for deposit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Deposit to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent should be successful with all correct data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Deposit successful\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":4000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Deposit to Agent for Wrong Token and Secret_key",
					"item": [
						{
							"name": "Deposit to agent with wrong token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful with wrong token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Token expired!\");\r",
											"});\r",
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}wrong",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to agent with empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful with empty token\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"No Token Found!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to agent with wrong secret key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful with wrong secret key\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Secret auth key validation failure!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}wrong",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to agent with wrong secret key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful with empty secret key\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Secret auth key validation failure!\");\r",
											"});\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Deposit to Agent for invalid/wrong data",
					"item": [
						{
							"name": "Deposit to agent from wrong account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful from an invalid Account\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Account does not exist\");\r",
											"});\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"Wrong_SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to invalid agent phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful to an invalid agent phone number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Account does not exist\");\r",
											"});\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"0993209170\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to agent an amount which is greater than systems main balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Agent shouldn't be successful with an amount which is greater than the systems main balance\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Insufficient balance\");\r",
											"});\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":40000000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Check Agent Balance",
			"item": [
				{
					"name": "Check agent balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Agent balance should be shown successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"var balance = jsonData.balance;\r",
									"pm.collectionVariables.set(\"Agent_Balance\",balance)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/{{Agent_Phone_number}}",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{Agent_Phone_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fault in Balance Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User Balance message is showing event though that user doesn't exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/0993209170",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"0993209170"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to Customer",
			"item": [
				{
					"name": "Successful Deposit to Customer",
					"item": [
						{
							"name": "Login for deposit Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var token = jsonData.token;\r",
											"pm.collectionVariables.set(\"Token\", token)\r",
											"\r",
											"pm.test(\"Successful Login with Valid Email and Password\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/user/login",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Successful Deposit to Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit to Customer is successful with all correct data\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Deposit successful\")\r",
											"})\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Agent_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"amount\":2000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Deposit for invalid data",
					"item": [
						{
							"name": "Deposit to Customer from wrong Agent account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit should fail for wrong agent account\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Account does not exist\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"0993209170\",\r\n    \"to_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to invalid Customer phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit should fail for invalid customer account\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Account does not exist\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Agent_Phone_number}}\",\r\n    \"to_account\":\"0993209170\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit from a customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit should fail if its being done from a customer account\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Only Agent can deposit money\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-2_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to Customer an amount which is greater than Agents main balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit should fail for an amount which is greater than the Agents main balance\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Insufficient balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Agent_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"amount\":7000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/deposit",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Check Customer_1  Balance after deposit",
			"item": [
				{
					"name": "Check Customer_1 balance successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer_1 balance message should show successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var balance = jsonData.balance;\r",
									"pm.collectionVariables.set(\"Customer_1_Balance\",balance)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/{{Customer-1_Phone_number}}",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{Customer-1_Phone_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fault in Balance Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User Balance message is showing event though that user doesn't exist\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/0993209170",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"0993209170"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Agent Balance After Deposit",
			"item": [
				{
					"name": "Calculating expected agent balance after deposit and matching with result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var balance = jsonData.balance;\r",
									"var Balance = pm.collectionVariables.get(\"Agent_Balance\")\r",
									"var x = Balance - 2000;\r",
									"\r",
									"pm.test(\"Agent Balance should show correct calculated value, after deposit to customer\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.balance).to.eql(x);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/{{Agent_Phone_number}}",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{Agent_Phone_number}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Money Withdrawrl",
			"item": [
				{
					"name": "Succesful Withdrwal",
					"item": [
						{
							"name": "Sucessful Money Withdraw by Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer withdraw should be successful with all correct data\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Withdraw successful\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/withdraw",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Customer_1 balance after withdrawl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User Balance message should show successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var balance = jsonData.balance;\r",
											"pm.collectionVariables.set(\"Customer_1_Balance\",balance)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{Base_URL}}/transaction/balance/{{Customer-1_Phone_number}}",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{Customer-1_Phone_number}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Withdrawls for invalid data",
					"item": [
						{
							"name": "Money withdrawl to wrong Agent account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer withdrawl should be failed for wrong agent account\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Account does not exist\")\r",
											"})\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"0993209170\",\r\n    \"amount\":500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/withdraw",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money withdrawl from invalid Customer phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer withdrawl should be failed for invalid customer account\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Account does not exist\")\r",
											"})\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"0993209170\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/withdraw",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money withdrawl from customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Money withdraw can't be done from customer\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Customer can not withdraw money from another customer\")\r",
											"})\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Agent_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"amount\":500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/withdraw",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw an amount which is greater than Customers main balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Withdrawing an amount which is greater than Customers main balance should fail\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Insufficient balance\")\r",
											"})\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"{{Agent_Phone_number}}\",\r\n    \"amount\":5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/withdraw",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Send Money",
			"item": [
				{
					"name": "Successful Send Money",
					"item": [
						{
							"name": "Send money from Customer_1 to Customer_2 sucessfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Send Money should be successful for all valid data\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Send money successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-2_Phone_number}}\",\r\n    \"amount\":200\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/sendmoney",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Failed Send Money",
					"item": [
						{
							"name": "Send Money to wrong customer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Send Money to wrong customer account should fail\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"From/To Account does not exist\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"0993209170\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/sendmoney",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money from invalid Customer phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Send Money from invalid Customer phone number should fail\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"From/To Account does not exist\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"0993209170\",\r\n    \"to_account\":\"{{Customer-2_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/sendmoney",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money from Agent Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sending Money from an Agent Account should fail\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"From/To account should not be an agent account\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Agent_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-2_Phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/sendmoney",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money an amount which is greater than Customers main balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Sending an amount which is greater than Customers main balance should fail\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Insufficient balance\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{Secret_Key}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{Token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{Customer-1_Phone_number}}\",\r\n    \"to_account\":\"{{Customer-2_Phone_number}}\",\r\n    \"amount\":5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{Base_URL}}/transaction/sendmoney",
									"host": [
										"{{Base_URL}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Check Customer_1  Balance After Send Money",
			"item": [
				{
					"name": "Calculating expected Customer_1 balance after sending money and match with result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"var balance = jsonData.balance;\r",
									"var Balance = pm.collectionVariables.get(\"Customer_1_Balance\")\r",
									"var x = Balance - 205;\r",
									"\r",
									"pm.test(\"Customer_1 Balance should show correct calculated value, after sending money to customer_2\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.balance).to.eql(x);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{Secret_Key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{Base_URL}}/transaction/balance/{{Customer-1_Phone_number}}",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{Customer-1_Phone_number}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Base_URL",
			"value": "http://dmoney.professionaltrainingbd.com",
			"type": "string"
		},
		{
			"key": "Token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbG1hbkBncnIubGEiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2NjQwODg1MjcsImV4cCI6MTY2NDA5MDMyN30.LSKI69WPxNjqyga1XlTSctLzUfcTDr6_24ByXv2g6yY"
		},
		{
			"key": "Secret_Key",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "Customer-1_Id",
			"value": 6886,
			"type": "string"
		},
		{
			"key": "Customer-2_Id",
			"value": 6887,
			"type": "string"
		},
		{
			"key": "Customer-1_Phone_number",
			"value": "688-209-8570"
		},
		{
			"key": "Customer-2_Phone_number",
			"value": "578-374-0063",
			"type": "string"
		},
		{
			"key": "Agent_Phone_number",
			"value": "767-681-8608",
			"type": "string"
		},
		{
			"key": "Agent_Id",
			"value": 6888,
			"type": "string"
		},
		{
			"key": "C_1_RandomId",
			"value": 743978,
			"type": "string"
		},
		{
			"key": "C_2_RandomId",
			"value": 919448,
			"type": "string"
		},
		{
			"key": "Agent_RandomId",
			"value": 449613,
			"type": "string"
		},
		{
			"key": "RandomId",
			"value": 7775,
			"type": "string"
		},
		{
			"key": "delete_user",
			"value": 6896,
			"type": "string"
		},
		{
			"key": "small_phone_number",
			"value": 841,
			"type": "string"
		},
		{
			"key": "Agent_Balance",
			"value": 4000,
			"type": "string"
		},
		{
			"key": "Customer_1_Balance",
			"value": 1490,
			"type": "string"
		}
	]
}